@using Microsoft.AspNetCore.Mvc.Localization;
@inject IViewLocalizer localizer;

@{
	ViewData["Title"] = "Listado tareas";
}

<div class="text-center">
	<h1 class="display-4">@localizer["Mis tareas"]</h1>
	<button type="button" class="btn btn-primary mb-3" onclick="agregarNuevaTareaAlListado()">
		@localizer["Agregar nueva tarea"]
	</button>
</div>

<div id="contenedor-listado-tareas" class="text-center">
	<div id="reordenable" class="text-start" data-bind="foreach: tareas">
		<div name="tarea" class="border mb-2 p-2" style="cursor: pointer"
		data-bind="click: manejarClickTarea">
			<div data-bind="text: titulo, hidden: esNuevo" class="fw-bold">

			</div>
			<div name="pasos-resumen" data-bind="visible: pasosTotal() > 0">
				<span data-bind="text: pasosRealizados">
				</span>/<span data-bind="text: pasosTotal"></span>
				<span data-bind="text: porcentajeCompletado"></span>
			</div>
			<input type="text" name="titulo-tarea" autocomplete="off"
				data-bind="value: titulo, 
						   visible: esNuevo,
						   attr: {'data-id': id},
						   event: {focusout: manejarFocusoutTituloTarea}" /> 
		</div>
	</div>


	<div data-bind="visible: cargando" class="spinner-border">
		<span class="visually-hidden">Cargando...</span>
	</div>

	<div data-bind="visible: noHayTareas">
		No existen tareas para mostrar.
	</div>
</div>

<partial name="_ModalEditarTarea" />

@section Scripts {

	<script src="~/js/utilidades.js" asp-append-version="true"></script>
	<script src="~/js/tareas.js" asp-append-version="true"></script>
	<script src="~/js/pasos.js" asp-append-version="true"></script>

	<script>

		const urlTareas = "/api/tareas";
		const urlPasos = "/api/pasos";

		const modalEditarTarea = document.getElementById('modal-editar-tarea'); // Referencia al modal de bootstrap
		const modalEditarTareaBootstrap = new bootstrap.Modal(modalEditarTarea); // Instancia de bootstrap

		function tareaListadoViewModelFn() {
			var self = this; // Truco para hacer una referencia para el objeto que se saque de la función.
			self.tareas = ko.observableArray([]); // ko es de knockoutJS que usamos como CDN.
			self.cargando = ko.observable(true); // ko.observable representa una función
			
			self.noHayTareas = ko.pureComputed(function(){
				if (self.cargando()){
					return false;
				}

				return self.tareas().length === 0;
			});
		}

		function tareaElementoListadoViewModel({id, titulo, pasosTotal, pasosRealizados}){
			var self = this;
			self.id = ko.observable(id);
			self.titulo = ko.observable(titulo);
			self.pasosTotal = ko.observable(pasosTotal); // Pasos totales de la tarea.
			self.pasosRealizados = ko.observable(pasosRealizados); // Pasos que se han realizado de la tarea.
			
			self.esNuevo = ko.pureComputed(function(){
				return self.id() == 0;
			});

			self.porcentajeCompletado = ko.pureComputed(function() {
				const calculo = Math.round(self.pasosRealizados() * 100.0 / self.pasosTotal());

				return `(${calculo}%)`;
			});
		};

		const tareaEditarVM = {
			id: 0,
			titulo: ko.observable(''),
			descripcion: ko.observable(''),
			pasos: ko.observableArray([]),
		}

		const tareaListadoViewModel = new tareaListadoViewModelFn();

		function pasoViewModel({id, descripcion, realizado, modoEdicion}) {
			var self = this;
			self.id = ko.observable(id || 0);
			self.descripcion = ko.observable(descripcion || '');
			self.descripcionAnterior = '';
			self.realizado = ko.observable(realizado || false);
			self.modoEdicion = ko.observable(modoEdicion);

			self.esNuevo = ko.pureComputed(function (){
				return self.id() == 0;
			})
		}

		obtenerTareas();

		ko.applyBindings(tareaListadoViewModel, document.getElementById('contenedor-listado-tareas'));
		ko.applyBindings(tareaEditarVM, document.getElementById('modal-editar-tarea'));
			
	</script>
}